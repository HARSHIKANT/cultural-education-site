{"ast":null,"code":"import { Box3, Vector3 } from \"three\";\n\n// === Load Ashoka Chakra Model ===\nconst loader = new GLTFLoader();\nlet chakraModel = null;\nloader.load(\"/models/scene.gltf\", gltf => {\n  chakraModel = gltf.scene;\n\n  // 1️⃣ Compute bounding box\n  const box = new Box3().setFromObject(chakraModel);\n  const size = new Vector3();\n  box.getSize(size);\n\n  // 2️⃣ Auto-scale the model so its largest dimension is 1 unit\n  const maxDim = Math.max(size.x, size.y, size.z);\n  const scale = 1 / maxDim; // adjust \"1\" to desired size in scene units\n  chakraModel.scale.set(scale, scale, scale);\n\n  // 3️⃣ Center the model at origin\n  const center = new Vector3();\n  box.getCenter(center);\n  chakraModel.position.sub(center); // move to origin\n\n  // 4️⃣ Optional: rotate if needed\n  chakraModel.rotation.x = Math.PI / 2;\n  scene.add(chakraModel);\n}, xhr => {\n  console.log(`Model ${(xhr.loaded / xhr.total * 100).toFixed(2)}% loaded`);\n}, error => {\n  console.error(\"Error loading GLTF:\", error);\n});","map":{"version":3,"names":["Box3","Vector3","loader","GLTFLoader","chakraModel","load","gltf","scene","box","setFromObject","size","getSize","maxDim","Math","max","x","y","z","scale","set","center","getCenter","position","sub","rotation","PI","add","xhr","console","log","loaded","total","toFixed","error"],"sources":["/Users/harshikantdubey/Desktop/cultural education site/src/components/ThreeScene.js"],"sourcesContent":["import { Box3, Vector3 } from \"three\";\n\n// === Load Ashoka Chakra Model ===\nconst loader = new GLTFLoader();\nlet chakraModel = null;\n\nloader.load(\n  \"/models/scene.gltf\",\n  (gltf) => {\n    chakraModel = gltf.scene;\n\n    // 1️⃣ Compute bounding box\n    const box = new Box3().setFromObject(chakraModel);\n    const size = new Vector3();\n    box.getSize(size);\n\n    // 2️⃣ Auto-scale the model so its largest dimension is 1 unit\n    const maxDim = Math.max(size.x, size.y, size.z);\n    const scale = 1 / maxDim; // adjust \"1\" to desired size in scene units\n    chakraModel.scale.set(scale, scale, scale);\n\n    // 3️⃣ Center the model at origin\n    const center = new Vector3();\n    box.getCenter(center);\n    chakraModel.position.sub(center); // move to origin\n\n    // 4️⃣ Optional: rotate if needed\n    chakraModel.rotation.x = Math.PI / 2;\n\n    scene.add(chakraModel);\n  },\n  (xhr) => {\n    console.log(`Model ${(xhr.loaded / xhr.total * 100).toFixed(2)}% loaded`);\n  },\n  (error) => {\n    console.error(\"Error loading GLTF:\", error);\n  }\n);\n"],"mappings":"AAAA,SAASA,IAAI,EAAEC,OAAO,QAAQ,OAAO;;AAErC;AACA,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;AAC/B,IAAIC,WAAW,GAAG,IAAI;AAEtBF,MAAM,CAACG,IAAI,CACT,oBAAoB,EACnBC,IAAI,IAAK;EACRF,WAAW,GAAGE,IAAI,CAACC,KAAK;;EAExB;EACA,MAAMC,GAAG,GAAG,IAAIR,IAAI,CAAC,CAAC,CAACS,aAAa,CAACL,WAAW,CAAC;EACjD,MAAMM,IAAI,GAAG,IAAIT,OAAO,CAAC,CAAC;EAC1BO,GAAG,CAACG,OAAO,CAACD,IAAI,CAAC;;EAEjB;EACA,MAAME,MAAM,GAAGC,IAAI,CAACC,GAAG,CAACJ,IAAI,CAACK,CAAC,EAAEL,IAAI,CAACM,CAAC,EAAEN,IAAI,CAACO,CAAC,CAAC;EAC/C,MAAMC,KAAK,GAAG,CAAC,GAAGN,MAAM,CAAC,CAAC;EAC1BR,WAAW,CAACc,KAAK,CAACC,GAAG,CAACD,KAAK,EAAEA,KAAK,EAAEA,KAAK,CAAC;;EAE1C;EACA,MAAME,MAAM,GAAG,IAAInB,OAAO,CAAC,CAAC;EAC5BO,GAAG,CAACa,SAAS,CAACD,MAAM,CAAC;EACrBhB,WAAW,CAACkB,QAAQ,CAACC,GAAG,CAACH,MAAM,CAAC,CAAC,CAAC;;EAElC;EACAhB,WAAW,CAACoB,QAAQ,CAACT,CAAC,GAAGF,IAAI,CAACY,EAAE,GAAG,CAAC;EAEpClB,KAAK,CAACmB,GAAG,CAACtB,WAAW,CAAC;AACxB,CAAC,EACAuB,GAAG,IAAK;EACPC,OAAO,CAACC,GAAG,CAAC,SAAS,CAACF,GAAG,CAACG,MAAM,GAAGH,GAAG,CAACI,KAAK,GAAG,GAAG,EAAEC,OAAO,CAAC,CAAC,CAAC,UAAU,CAAC;AAC3E,CAAC,EACAC,KAAK,IAAK;EACTL,OAAO,CAACK,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;AAC7C,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}